// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheClient is a mock of CacheClient interface.
type MockCacheClient struct {
	ctrl     *gomock.Controller
	recorder *MockCacheClientMockRecorder
}

// MockCacheClientMockRecorder is the mock recorder for MockCacheClient.
type MockCacheClientMockRecorder struct {
	mock *MockCacheClient
}

// NewMockCacheClient creates a new mock instance.
func NewMockCacheClient(ctrl *gomock.Controller) *MockCacheClient {
	mock := &MockCacheClient{ctrl: ctrl}
	mock.recorder = &MockCacheClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheClient) EXPECT() *MockCacheClientMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockCacheClient) Clean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean")
}

// Clean indicates an expected call of Clean.
func (mr *MockCacheClientMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockCacheClient)(nil).Clean))
}

// GetUserFollowers mocks base method.
func (m *MockCacheClient) GetUserFollowers(username, lastFollowerId string, limit int) ([]string, string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowers", username, lastFollowerId, limit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// GetUserFollowers indicates an expected call of GetUserFollowers.
func (mr *MockCacheClientMockRecorder) GetUserFollowers(username, lastFollowerId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowers", reflect.TypeOf((*MockCacheClient)(nil).GetUserFollowers), username, lastFollowerId, limit)
}

// SetUserFollowers mocks base method.
func (m *MockCacheClient) SetUserFollowers(username, lastFollowerId string, limit int, followers []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserFollowers", username, lastFollowerId, limit, followers)
}

// SetUserFollowers indicates an expected call of SetUserFollowers.
func (mr *MockCacheClientMockRecorder) SetUserFollowers(username, lastFollowerId, limit, followers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserFollowers", reflect.TypeOf((*MockCacheClient)(nil).SetUserFollowers), username, lastFollowerId, limit, followers)
}
